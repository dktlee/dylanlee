# loop through each year's csv file and load data
for (year in yr_start:yr_end) {
file_pth <- paste("player_stats_totals/", year, ".csv", sep = "")
df.temp <- read.csv(file_pth, header = TRUE, stringsAsFactors = FALSE)
df.temp$Season <- year
# rename column names
df.temp <- data.frame(Rk = df.temp$Rk,Player = df.temp$Player,Pos = df.temp$Pos,
Age = df.temp$Age,Tm = df.temp$Tm,GP = df.temp$G,
GS = df.temp$GS,MP = df.temp$MP,FGM = df.temp$FG,
FGA = df.temp$FGA,FGperc = df.temp$FG.,ThreePM = df.temp$X3P,
ThreePA = df.temp$X3PA,ThreePperc = df.temp$X3P.,
TwoPM = df.temp$X2P,TwoPA = df.temp$X2PA,
TwoPperc = df.temp$X2P.,eFGperc = df.temp$eFG.,
FTM = df.temp$FT,FTA = df.temp$FTA,FTperc = df.temp$FT.,
ORB = df.temp$ORB,DRB = df.temp$DRB,TRB = df.temp$TRB,
AST = df.temp$AST,STL = df.temp$STL,BLK = df.temp$BLK,
TOV = df.temp$TOV,PF = df.temp$PF,PTS = df.temp$PTS,
Season = df.temp$Season,stringsAsFactors = FALSE)
# combine all seasons into one large data frame
df <- data.frame(rbind(df, df.temp))
}
df.draft <- read.csv("player_draft_year/player_draft_year.csv",
header = TRUE,stringsAsFactors = FALSE)
df.draft <- df.draft %>% distinct()
df.draft <- df.draft[, c(2, 7)]
# missing Ben Wallace data point
df.draft <- rbind(df.draft, data_frame(Year = "1996",
Player = "Ben Wallace\\wallabe01"))
df.draft <- data.frame(DraftYear = df.draft$Year, Player = df.draft$Player)
# remove '*' from any name
for (i in 1:dim(df)[1]) {
name <- df[i, ]$Player
name <- gsub("[*]", "", name)
df[i, ]$Player <- name
}
# merge draft year to player total stats data
df <- merge(df, df.draft, by = c("Player"))
df$DraftYear <- as.numeric(as.character(df$DraftYear))
# reading player names from Basketball Reference csv gives format 'Chris Paul\paulch01'
# want to clean format to just First & Last name
df$Player <- as.character(df$Player)
names <- strsplit(as.character(df$Player), "[\\]")
# clean name
for (i in 1:dim(df)[1]) {
name <- names[[i]][1]
df$Player[i] <- name
}
# add All NBA award winners to season
winners <- data_all_nba[which(data_all_nba$Season >= 2000),]
# initialize to 0
df$TotalAllNba <- 0
for (i in 1:dim(winners)[1]) {
df[which(as.character(df$Player) == as.character(winners$Player[i]) &
as.integer(df$Season) == winners$Season[i]),]$TotalAllNba <- 1
}
# remove TOT seasons (rows that consolidated totals for players who played for
# multiple teams in 1 season)
df <- df[which(df$Tm != "TOT"),]
df$FGperc <- ifelse(df$FTA == 0, 0, df$FGperc)
df$ThreePperc <- ifelse(df$ThreePA == 0, 0, df$ThreePperc)
# remove rows with missing observations
df <- df[complete.cases(df), ]
df <- df[, c(1, 2, 3, 5, 31, 32, 33, 4, seq(6, 30)),]
return(df)
}
YEAR_START <- 1986
YEAR_END <- 2019
# load all data in from Basketball-Reference.com
data_all_nba <- loadAwardsData()
data_player_totals <- loadTotalsData(2000, YEAR_END)
data_player_totals$YearsInNba <- data_player_totals$Season -
as.integer(data_player_totals$DraftYear)
data_player_totals$AllNba <- FALSE
data_player_totals$AllNba <- ifelse(data_player_totals$TotalAllNba == 1, TRUE, FALSE)
head(data_all_nba[sample(nrow(data_all_nba), 10),], 10)
head(data_player_totals[sample(nrow(data_player_totals), 10),], 10)
# look at the distribution of the stats we have
cat("Player Totals Data:",dim(data_player_totals)[1],
"rows by",dim(data_player_totals)[2],"columns\n")
data_player_totals %>% select(Age,GP,GS,MP,FGM,FGA,FGperc,ThreePM,ThreePA,
ThreePperc,TwoPM,TwoPA,TwoPperc,eFGperc,FTM,FTA,
FTperc,ORB,DRB,TRB,AST,STL,BLK,PTS) %>% summary()
# to determine which stats might be correlated with winning an All-NBA
# selection for a given season
corr.matrix.totals <- cor(data_player_totals[, c("TotalAllNba","Age","GP","GS","MP","FGM",
"FGA","FGperc","ThreePM","ThreePA","ThreePperc",
"TwoPM","TwoPA","TwoPperc","eFGperc","FTM",
"FTA","FTperc","ORB","DRB","TRB","AST","STL",
"BLK","TOV","PF","PTS")])
corrplot(corr.matrix.totals[1, 2:27, drop = FALSE],
title = "Correlation: Player Totals",mar = c(0, 0, 1, 0))
# note: there might be a more efficient way to code this section,
# but I sacrificed ease for aesthetics since this will be generating a report
hist.totals.Age <- ggplot(data_player_totals, aes(x=Age,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.GP <- ggplot(data_player_totals, aes(x=GP,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.GS <- ggplot(data_player_totals, aes(x=GS,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.MP <- ggplot(data_player_totals, aes(x=MP,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.FGM <- ggplot(data_player_totals, aes(x=FGM,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.FGA <- ggplot(data_player_totals, aes(x=FGA,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.FGperc <- ggplot(data_player_totals, aes(x=FGperc,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.ThreePM <-ggplot(data_player_totals,aes(x=ThreePM,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.ThreePA <-ggplot(data_player_totals,aes(x=ThreePA,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.ThreePperc <- ggplot(data_player_totals,
aes(x=ThreePperc,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.TwoPM <- ggplot(data_player_totals, aes(x=TwoPM,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.TwoPA <- ggplot(data_player_totals, aes(x=TwoPA,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.TwoPperc <- ggplot(data_player_totals,
aes(x=TwoPperc,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.eFGperc <-ggplot(data_player_totals,aes(x=eFGperc,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.FTM <- ggplot(data_player_totals, aes(x=FTM,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.FTA <- ggplot(data_player_totals, aes(x=FTA,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.FTperc <-ggplot(data_player_totals,aes(x=FTperc,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.ORB <- ggplot(data_player_totals, aes(x=ORB,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.DRB <- ggplot(data_player_totals, aes(x=DRB,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.TRB <- ggplot(data_player_totals, aes(x=TRB,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.AST <- ggplot(data_player_totals, aes(x=AST,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.STL <- ggplot(data_player_totals, aes(x=STL,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.BLK <- ggplot(data_player_totals, aes(x=BLK,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.TOV <- ggplot(data_player_totals, aes(x=TOV,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.PF <- ggplot(data_player_totals, aes(x=PF,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.PTS <- ggplot(data_player_totals, aes(x=PTS,fill=AllNba,color=AllNba)) +
geom_histogram(position = "identity", alpha = 0.5) +
ggtitle("Total Stats") +
theme(plot.title = element_text(hjust = 0.5))
hist.totals.Age
hist.totals.GP
hist.totals.GS
hist.totals.MP
hist.totals.FGM
hist.totals.FGA
hist.totals.FGperc
hist.totals.ThreePM
hist.totals.ThreePA
hist.totals.ThreePperc
hist.totals.TwoPM
hist.totals.TwoPA
hist.totals.TwoPperc
hist.totals.eFGperc
hist.totals.FTM
hist.totals.FTA
hist.totals.FTperc
hist.totals.ORB
hist.totals.DRB
hist.totals.TRB
hist.totals.AST
hist.totals.STL
hist.totals.BLK
hist.totals.TOV
hist.totals.PF
hist.totals.PTS
# filter datapoints based on Minutes played Games Played
data_player_totals_filtered <- data_player_totals[which(data_player_totals$MP>=1600),c(1:34)]
# lets look at the correlation between All-NBA selections and stats for the
# filtered data set
corr.matrix.totals_filtered <- cor(data_player_totals_filtered[,c("TotalAllNba","Age",
"GP","GS","MP","FGM","FGA","FGperc","ThreePM",
"ThreePA","ThreePperc","TwoPM","TwoPA",
"TwoPperc","eFGperc","FTM","FTA",
"FTperc","ORB","DRB","TRB","AST",
"STL","BLK","TOV","PF","PTS")])
corrplot(corr.matrix.totals_filtered[1,2:27,drop=FALSE],
title="Correlation: Player Totals", mar=c(0,0,1,0))
# after looking at the data summaries and distribution, I normalized each
# statistic in each season by dividing it by the seasons max. This means
# each statistic now lies between (0,1), and the stat leader will now have a value of 1.
# This is to avoid outliers who's stats would hurt the model
# Player Stat Total
data_player_totals_normalized <- normalize_stats(data_player_totals_filtered)
guard_data_totals <-
data_player_totals_normalized[which(data_player_totals_normalized$Pos %in%
c('PG', 'SG')), ]
forward_data_totals <-
data_player_totals_normalized[which(data_player_totals_normalized$Pos %in%
c('SF', 'PF')), ]
center_data_totals <-
data_player_totals_normalized[which(data_player_totals_normalized$Pos %in% c('C')), ]
############### linear model ###############
###############    guard     ###############
lm.guard.total.full <- lm(TotalAllNba ~ GP + GS + MP + Age + FGM + FGA + FGperc +
ThreePM + ThreePA + ThreePperc + TwoPM + TwoPA + TwoPperc +
eFGperc + FTM + FTA + FTperc + ORB + DRB + TRB + AST + STL +
BLK + TOV + PF + PTS,
data = guard_data_totals[which(guard_data_totals$Season != 2019), ])
# lm.guard.total.reduced <- step(lm.guard.total.full, trace = 0)
# summary(lm.guard.total.reduced)
lm.guard.total.reduced <- lm(TotalAllNba ~ GP + GS + MP + FGM + ThreePM + ThreePA +
ThreePperc + TwoPM + TwoPA + TwoPperc + eFGperc + FTM +
FTperc + DRB + AST + STL + BLK + TOV + PF,
data = guard_data_totals[which(guard_data_totals$Season != 2019), ])
lm.guard.total.full.pred <-
predAllNbaPlayers(guard_data_totals[which(guard_data_totals$Season == 2019), ],
lm.guard.total.reduced)[1:6, ]
lm.guard.total.red.pred <-
predAllNbaPlayers(guard_data_totals[which(guard_data_totals$Season == 2019), ],
lm.guard.total.reduced)[1:6, ]
############### linear model ###############
###############   forward    ###############
lm.forward.total.full <- lm(TotalAllNba ~ GP + GS + MP + Age + FGM + FGA + FGperc +
ThreePM + ThreePA + ThreePperc + TwoPM + TwoPA + TwoPperc +
eFGperc + FTM + FTA + FTperc + ORB + DRB + TRB + AST + STL +
BLK + TOV + PF + PTS,
data = forward_data_totals[which(forward_data_totals$Season != 2019), ])
# lm.forward.total.reduced <- step(lm.forward.total.full, trace = 0)
# summary(lm.forward.total.reduced)
lm.forward.total.reduced <- lm(TotalAllNba ~ GP + MP + FGperc + ThreePperc + TwoPM +
TwoPA + TwoPperc + eFGperc + FTM + FTperc + ORB + DRB +
AST + STL + BLK + TOV + PTS,
data = forward_data_totals[which(forward_data_totals$Season != 2019), ])
lm.forward.total.full.pred <-
predAllNbaPlayers(forward_data_totals[which(forward_data_totals$Season == 2019), ],
lm.forward.total.reduced)[1:6, ]
lm.forward.total.red.pred <-
predAllNbaPlayers(forward_data_totals[which(forward_data_totals$Season == 2019), ],
lm.forward.total.reduced)[1:6, ]
############### linear model ###############
###############    center    ###############
lm.center.total.full <- lm(TotalAllNba ~ GP + GS + MP + Age + FGM + FGA + FGperc +
ThreePM + ThreePA + ThreePperc + TwoPM + TwoPA + TwoPperc +
eFGperc + FTM + FTA + FTperc + ORB + DRB + TRB + AST + STL +
BLK + TOV + PF + PTS,
data = center_data_totals[which(center_data_totals$Season != 2019), ])
# lm.center.total.reduced <- step(lm.center.total.full, trace = 0)
# summary(lm.center.total.reduced)
lm.center.total.reduced <- lm(TotalAllNba ~ GS + Age + TwoPM + TwoPA + FTM + FTA +
FTperc + ORB + TRB + AST + BLK + PF,
data = center_data_totals[which(center_data_totals$Season != 2019), ])
lm.center.total.full.pred <-
predAllNbaPlayers(center_data_totals[which(center_data_totals$Season == 2019), ],
lm.center.total.reduced)[1:3, ]
lm.center.total.red.pred <-
predAllNbaPlayers(center_data_totals[which(center_data_totals$Season == 2019), ],
lm.center.total.reduced)[1:3, ]
############### logistic model ###############
###############     guard      ###############
log.guard.total.full <- glm(TotalAllNba ~ GP + GS + MP + Age + FGM + FGA + FGperc +
ThreePM + ThreePA + ThreePperc + TwoPM + TwoPA + TwoPperc +
eFGperc + FTM + FTA + FTperc + ORB + DRB + TRB + AST +
STL + BLK + TOV + PF + PTS,
data = guard_data_totals[which(guard_data_totals$Season != 2019), ],
family = binomial(link = "logit"))
# log.guard.total.reduced <- step(log.guard.total.full, trace = 0)
# summary(log.guard.total.reduced)
log.guard.total.reduced <- glm(TotalAllNba ~ MP + FGM + FGA + TwoPA + eFGperc + FTM +
DRB + AST + STL + TOV + PF + PTS,
data = guard_data_totals[which(guard_data_totals$Season != 2019), ],
family = binomial(link = "logit"))
log.guard.total.full.pred <-
predAllNbaPlayers(guard_data_totals[which(guard_data_totals$Season == 2019), ],
log.guard.total.reduced)[1:6, ]
log.guard.total.red.pred <-
predAllNbaPlayers(guard_data_totals[which(guard_data_totals$Season == 2019), ],
log.guard.total.reduced)[1:6, ]
############### logistic model ###############
###############     forward    ###############
log.forward.total.full <- glm(TotalAllNba ~ GP + GS + MP + Age + FGM + FGA + FGperc +
ThreePM + ThreePA + ThreePperc + TwoPM + TwoPA +
TwoPperc +eFGperc + FTM + FTA + FTperc + ORB + DRB +
TRB + AST + STL + BLK + TOV + PF + PTS,
data = forward_data_totals[which(forward_data_totals$Season != 2019), ],
family = binomial(link = "logit"))
# log.forward.total.reduced <- step(log.forward.total.full, trace = 0)
# summary(log.forward.total.reduced)
log.forward.total.reduced <- glm(TotalAllNba ~ MP + Age + FGperc + ThreePperc +
TwoPM +eFGperc + FTM + DRB + TRB + AST + STL +
BLK + TOV + PTS,
data = forward_data_totals[which(forward_data_totals$Season != 2019), ],
family = binomial(link = "logit"))
log.forward.total.full.pred <-
predAllNbaPlayers(forward_data_totals[which(forward_data_totals$Season == 2019), ],
log.forward.total.reduced)[1:6, ]
log.forward.total.red.pred <-
predAllNbaPlayers(forward_data_totals[which(forward_data_totals$Season == 2019), ],
log.forward.total.reduced)[1:6, ]
############### logistic model ###############
###############     center     ###############
log.center.total.full <- glm(TotalAllNba ~ GP + GS + Age + FGM + FGA + FGperc +
ThreePM + TwoPM + TwoPA + TwoPperc + eFGperc + FTM +
ORB + DRB + AST + STL + BLK + PF,
data = center_data_totals[which(center_data_totals$Season != 2019), ],
family = binomial(link = "logit"))
# log.center.total.reduced <- step(log.center.total.full, trace = 0)
# summary(log.center.total.reduced)
log.center.total.reduced <- glm(TotalAllNba ~ GP + Age + FGA + ThreePA + TwoPM +
TwoPA + eFGperc + FTA + FTperc + TRB + AST + BLK + TOV,
data = center_data_totals[which(center_data_totals$Season != 2019), ],
family = binomial(link = "logit"))
log.center.total.full.pred <-
predAllNbaPlayers(center_data_totals[which(center_data_totals$Season == 2019), ],
log.center.total.reduced)[1:3, ]
log.center.total.red.pred <-
predAllNbaPlayers(center_data_totals[which(center_data_totals$Season == 2019), ],
log.center.total.reduced)[1:3, ]
# all nba team
lm.total.all_nba_team.full <- rbind(lm.guard.total.full.pred,
lm.forward.total.full.pred, lm.center.total.full.pred)
lm.total.all_nba_team.red <- rbind(lm.guard.total.red.pred,
lm.forward.total.red.pred, lm.center.total.red.pred)
# linear accuracy
lm.total.full.acc <- calcAccuracy(lm.total.all_nba_team.full)
lm.total.red.acc <- calcAccuracy(lm.total.all_nba_team.red)
# all nba team
log.total.all_nba_team.full <- rbind(log.guard.total.full.pred,
log.forward.total.full.pred,
log.center.total.full.pred)
log.total.all_nba_team.red <- rbind(log.guard.total.red.pred,
log.forward.total.red.pred,
log.center.total.red.pred)
# logistic accuracy
log.total.full.acc <- calcAccuracy(log.total.all_nba_team.full)
log.total.red.acc <- calcAccuracy(log.total.all_nba_team.red)
full_vs_red_acc <- data.frame(Data = c("Full Model", "Reduced Model", "Full Model",
"Reduced Model"),
Linear = c(lm.total.full.acc, lm.total.red.acc),
Logistic = c(log.total.full.acc, log.total.red.acc))
par(mfrow = c(1, 1))
colours <- viridis(2)
full_vs_red_plot <- barplot(c(full_vs_red_acc$Linear[1],full_vs_red_acc$Linear[2],
full_vs_red_acc$Logistic[1],full_vs_red_acc$Logistic[2]),
names.arg = full_vs_red_acc$Data,ylim = c(0, 1),
las = 2,col = c(rep(colours[1], 2), rep(colours[2], 2)),
ylab = "Accuracy",
main = "Player Total Stats - 2019 Predictions",
cex.names = 0.6)
text(x = full_vs_red_plot,y = c(full_vs_red_acc$Linear[1],full_vs_red_acc$Linear[2],
full_vs_red_acc$Logistic[1],full_vs_red_acc$Logistic[2]),
label = round(c(full_vs_red_acc$Linear[1],full_vs_red_acc$Linear[2],
full_vs_red_acc$Logistic[1],full_vs_red_acc$Logistic[2]),digits = 3),
pos = 3,cex = 0.7)
legend("bottomright", c("Linear Model", "Logistic Model"), fill = colours, cex = 0.8)
lm.guard.total.accuracies <- mean(cross_validation_all_nba_players(guard_data_totals,
lm.guard.total.reduced, "guard"))
lm.forward.total.accuracies <- mean(cross_validation_all_nba_players(forward_data_totals,
lm.forward.total.reduced, "forward"))
lm.center.total.accuracies <- mean(cross_validation_all_nba_players(center_data_totals,
lm.center.total.reduced, "center"))
log.guard.total.accuracies <- mean(cross_validation_all_nba_players(guard_data_totals,
log.guard.total.reduced, "guard"))
log.forward.total.accuracies <- mean(cross_validation_all_nba_players(forward_data_totals,
log.forward.total.reduced, "forward"))
log.center.total.accuracies <- mean(cross_validation_all_nba_players(center_data_totals,
log.center.total.reduced, "center"))
linear_vs_log <- data.frame(Linear =  c(lm.guard.total.accuracies,
lm.forward.total.accuracies,
lm.center.total.accuracies),
Logistic = c(log.guard.total.accuracies,
log.forward.total.accuracies,
log.center.total.accuracies))
par(mfrow = c(1, 1))
colours <- viridis(3)
full_vs_red_plot <- barplot(c(linear_vs_log$Linear[1],
linear_vs_log$Logistic[1],linear_vs_log$Linear[2],
linear_vs_log$Logistic[2],
linear_vs_log$Linear[3],linear_vs_log$Logistic[3]),
names.arg = rep(c("LM - Total", "Log - Total"), 3),
ylim = c(0, 1),las = 2,
col = c(rep(colours[1], 2), rep(colours[2], 2),
rep(colours[3], 2)),ylab = "Accuracy",
main = "Linear vs Logistic Model Accuracy - LOOCV",
cex.names = 0.6)
text(x = full_vs_red_plot,y = c(linear_vs_log$Linear[1],linear_vs_log$Logistic[1],
linear_vs_log$Linear[2],linear_vs_log$Logistic[2],
linear_vs_log$Linear[3],linear_vs_log$Logistic[3]),
label = round(c(linear_vs_log$Linear[1],linear_vs_log$Logistic[1],
linear_vs_log$Linear[2],linear_vs_log$Logistic[2],
linear_vs_log$Linear[3],linear_vs_log$Logistic[3]),digits = 3),
pos = 3,cex = 0.7)
legend("bottomright", c("Guards", "Forwards", "Centers"), fill = colours, cex = 0.8)
# this simulates the stats for NBA players over the next 15 seasons
# set.seed(24)
df.forecast <- simulate_all_nba(data_player_totals_filtered)
# Total number of All-NBA selections remaining in each of player's career
luka <- dim(df.forecast[which(df.forecast$Player=="Luka Dončić" &
df.forecast$TotalAllNba==1&df.forecast$Season>=2020),])[1]
kyrie <- dim(df.forecast[which(df.forecast$Player=="Kyrie Irving" &
df.forecast$TotalAllNba==1&df.forecast$Season>=2020),])[1]
steph <- dim(df.forecast[which(df.forecast$Player=="Stephen Curry" &
df.forecast$TotalAllNba==1&df.forecast$Season>=2020),])[1]
kat <- dim(df.forecast[which(df.forecast$Player=="Karl-Anthony Towns" &
df.forecast$TotalAllNba==1&df.forecast$Season>=2020),])[1]
# I predict that Luka Doncic will receive 7 All-NBA selections
# Kyrie Irving 1, Steph Curry 1, and Karl-Anthony Towns 11
print(paste("I predict that Luka Doncic will receive ",luka,
" All-NBA selections for the remainder of his carrer, Kyrie Irving ",kyrie,
", Steph Curry ",steph,", and Karl-Anthony Towns ",kat,"."))
###### Note: running 100 simulations takes a long time so I have it commented out
# seeds <- sample(1:100,100)
seeds <- c(1)
luka_most <- 0
kyrie_most <- 0
steph_most <- 0
kat_most <- 0
sim_results <- data.frame(Seed=integer(),Luka=integer(),Kyrie=integer(),Steph=integer(),Kat=integer())
for (i in seeds) {
set.seed(i)
df.forecast <- simulate_all_nba(data_player_totals_filtered)
luka <- dim(df.forecast[which(df.forecast$Player=="Luka Dončić"&df.forecast$TotalAllNba==1&df.forecast$Season>=2020),])[1]
kyrie <- dim(df.forecast[which(df.forecast$Player=="Kyrie Irving"&df.forecast$TotalAllNba==1&df.forecast$Season>=2020),])[1]
steph <- dim(df.forecast[which(df.forecast$Player=="Stephen Curry"&df.forecast$TotalAllNba==1&df.forecast$Season>=2020),])[1]
kat <- dim(df.forecast[which(df.forecast$Player=="Karl-Anthony Towns"&df.forecast$TotalAllNba==1&df.forecast$Season>=2020),])[1]
if (luka>kyrie&luka>steph&luka>kat) {
luka_most = luka_most + 1
} else if (kyrie>luka&kyrie>steph&kyrie>kat) {
kyrie_most = kyrie_most + 1
} else if (steph>luka&steph>kyrie&steph>kat) {
steph_most = steph_most + 1
} else if (kat>luka&kat>kyrie&kat>steph) {
kat_most = kat_most + 1
} else {
if (luka==max(luka,kyrie,steph,kat)) {
luka_most = luka_most + 1
}
if (kyrie==max(luka,kyrie,steph,kat)) {
kyrie_most = kyrie_most + 1
}
if (steph==max(luka,kyrie,steph,kat)) {
steph_most = steph_most + 1
}
if (kat==max(luka,kyrie,steph,kat)) {
kat_most = kat_most + 1
}
}
sim_results <- rbind(sim_results,data.frame(Seed=i,Luka=luka,Kyrie=kyrie,Steph=steph,Kat=kat))
}
luka_likelihood <- luka_most / length(seeds)
kyrie_likelihood <- kyrie_most / length(seeds)
steph_likelihood <- steph_most / length(seeds)
kat_likelihood <- kat_most / length(seeds)
luka_est <- mean(sim_results$Luka)
kyrie_est <- mean(sim_results$Kyrie)
steph_est <- mean(sim_results$Steph)
kat_est <- mean(sim_results$Kat)
# The likelihood that Doncic will have the greatest number of All-NBA selections remaining among the group is: 0.61, Kyrie Irving: 0.01, Steph Curry: 0, Karl-Anthony Towns: 0.46
# The average number of All-NBA selections for Luka Doncic out of 100 simulation(s) is 7.64, Kyrie Irving: 0.68, Steph Curry: 0.43, and Karl-Anthony Towns: 6.81
print(paste("The likelihood that Doncic will have the greatest number of All-NBA selections remaining among the group is: ",luka_likelihood,", Kyrie Irving: ",kyrie_likelihood,
", Steph Curry: ",steph_likelihood,", Karl-Anthony Towns: ",kat_likelihood, sep = ""))
print(paste("The average number of All-NBA selections for Luka Doncic out of ",length(seeds)," simulation(s) is ",luka_est,
", Kyrie Irving: ",kyrie_est,", Steph Curry: ",steph_est,", and Karl-Anthony Towns: ",kat_est,sep = ""))
